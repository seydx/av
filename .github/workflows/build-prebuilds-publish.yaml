name: "ðŸš€ Build and Publish Release"

on:
  push:
    tags: ["v*"]

jobs:
  build:
    uses: ./.github/workflows/build-prebuilds.yaml

  package-and-publish:
    name: "Package and Publish"
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: "24"
          registry-url: "https://registry.npmjs.org"

      - name: Download all prebuilds
        uses: actions/download-artifact@v5
        with:
          pattern: prebuild-*
          path: prebuilds-artifacts

      - name: Prepare prebuilds structure
        run: |
          mkdir -p prebuilds

          # Copy all prebuilds to a single directory structure
          for dir in prebuilds-artifacts/*/; do
            cp -r "$dir"* prebuilds/
          done

          echo "Combined prebuilds structure:"
          ls -laR prebuilds/

          # Verify we have all expected platforms
          echo -e "\nVerifying platform coverage:"
          for platform in darwin-x64 darwin-arm64 linux-x64 linux-arm64 win32-x64 win32-arm64; do
            if [ -d "prebuilds/$platform" ]; then
              echo "âœ“ $platform"
            else
              echo "âœ— $platform missing"
              exit 1  # Fail if any platform is missing
            fi
          done

      - name: Create platform packages
        run: |
          node scripts/create-platform-packages.js

          # Copy prebuilds to platform packages (already named node-av.node)
          for platform in darwin-x64 darwin-arm64 linux-x64 linux-arm64 win32-x64 win32-arm64; do
            if [ -d "prebuilds/$platform" ]; then
              cp "prebuilds/$platform/node-av.node" "packages/$platform/node-av.node"
              echo "Copied binary for $platform"
            fi
          done

          echo "Platform packages created:"
          ls -la packages/
          for pkg in packages/*/; do
            echo "Contents of $pkg:"
            ls -la "$pkg"
          done

      - name: Update version
        run: |
          # Extract version from tag
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "Version: $VERSION"

          # Update main package version
          npm version $VERSION --no-git-tag-version

          # Update platform package versions
          for pkg in packages/*/package.json; do
            if [ -f "$pkg" ]; then
              cd $(dirname "$pkg")
              npm version $VERSION --no-git-tag-version
              cd -
            fi
          done

      - name: Create release archives
        run: |
          # Create archives for each platform
          for platform in darwin-x64 darwin-arm64 linux-x64 linux-arm64 win32-x64 win32-arm64; do
            if [ -d "prebuilds/$platform" ]; then
              zip -r "node-av-${platform}-${GITHUB_REF#refs/tags/}.zip" "prebuilds/$platform"
            fi
          done

          echo "Release archives created:"
          ls -la *.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: "*.zip"
          body: |
            ## node-av Release ${{ github.ref_name }}

            ### ðŸ“¦ Updated Packages

            The following platform packages have been updated to ${{ github.ref_name }}:
            - `@seydx/node-av-darwin-arm64@${{ github.ref_name }}`
            - `@seydx/node-av-darwin-x64@${{ github.ref_name }}`
            - `@seydx/node-av-linux-arm64@${{ github.ref_name }}`
            - `@seydx/node-av-linux-x64@${{ github.ref_name }}`
            - `@seydx/node-av-win32-arm64@${{ github.ref_name }}`
            - `@seydx/node-av-win32-x64@${{ github.ref_name }}`

      - name: Publish to NPM
        run: |
          # Publish platform packages
          for pkg_dir in packages/*/; do
            if [ -d "$pkg_dir" ]; then
              cd "$pkg_dir"
              npm publish --access public
              cd -
            fi
          done

          # Publish main package
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
