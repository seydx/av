name: '🏗️ Build Prebuilds'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CACHE_VERSION_WINDOWS: 'v12'
  CACHE_VERSION_LINUX: 'v24'
  CACHE_VERSION_MACOS: 'v10'

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: false
        description: 'NPM token for publishing packages'
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - '**/*.md'
  # pull_request:
  #   paths-ignore:
  #     - '**/*.md'

jobs:
  build_windows:
    name: 'Windows ${{ matrix.os.arch }}'
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: CLANG64
            arch: x64
            runner: windows-2022
            msystem: CLANG64
            toolchain: mingw-w64-clang-x86_64-toolchain
            nasm: mingw-w64-clang-x86_64-nasm
            build_script: ./msys2/build.sh
          - name: CLANGARM64
            arch: arm64
            runner: windows-11-arm
            msystem: CLANGARM64
            toolchain: mingw-w64-clang-aarch64-toolchain
            nasm: mingw-w64-clang-aarch64-nasm
            build_script: ./msys2/buildarm64.sh
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.os.msystem }}
          install: >-
            git
            curl
            wget
            zip
            ${{ matrix.os.toolchain }}
            quilt
            diffstat
            ${{ matrix.os.nasm }}
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-python
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-nodejs

      - uses: actions/checkout@v5
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Get Jellyfin FFmpeg commit hash
        id: ffmpeg-hash
        shell: bash
        run: echo "hash=$(git -C externals/jellyfin-ffmpeg rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Prepare directories
        run: |
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/lib/pkgconfig
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/include
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/bin

      - name: Restore FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: C:\ffmpeg-cache-${{ matrix.os.arch }}
          key: ffmpeg-windows-${{ matrix.os.arch }}-${{ env.CACHE_VERSION_WINDOWS }}-${{ steps.ffmpeg-hash.outputs.hash }}
          restore-keys: ffmpeg-windows-${{ matrix.os.arch }}-${{ env.CACHE_VERSION_WINDOWS }}-
          
      - name: Copy cache to MSYS2 location
        if: steps.cache-ffmpeg.outputs.cache-hit == 'true'
        shell: msys2 {0}
        run: |
          CACHE_DIR="C:/ffmpeg-cache-${{ matrix.os.arch }}"
          MSYS_PREFIX="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild"
          
          if [ -d "${CACHE_DIR}" ]; then
            echo "Restoring FFmpeg cache from ${CACHE_DIR} to ${MSYS_PREFIX}"
            rm -rf "${MSYS_PREFIX}" 2>/dev/null || true
            mkdir -p "${MSYS_PREFIX}"
            cp -r "${CACHE_DIR}"/* "${MSYS_PREFIX}/"
            echo "Cache restored successfully"
          else
            echo "Cache directory ${CACHE_DIR} not found!"
            exit 1
          fi

      - name: Build FFmpeg
        id: build-ffmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          cd externals/jellyfin-ffmpeg/msys2
          
          # Run Jellyfin build script
          if [ "${{ matrix.os.arch }}" = "arm64" ]; then
            ./buildarm64.sh
          else
            ./build.sh
          fi
          
          PREFIX="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild"
          
          # Install FFmpeg libraries
          cd ..
          make install
          
          # Copy FFmpeg libraries to main lib directory
          if [ -d "${PREFIX}/jellyfin-ffmpeg/lib" ]; then
            cp ${PREFIX}/jellyfin-ffmpeg/lib/*.a ${PREFIX}/lib/ 2>/dev/null || true
            cp -r ${PREFIX}/jellyfin-ffmpeg/include/* ${PREFIX}/include/ 2>/dev/null || true
            
            if [ -d "${PREFIX}/jellyfin-ffmpeg/lib/pkgconfig" ]; then
              mkdir -p ${PREFIX}/lib/pkgconfig
              cp ${PREFIX}/jellyfin-ffmpeg/lib/pkgconfig/*.pc ${PREFIX}/lib/pkgconfig/ 2>/dev/null || true
            fi
          fi
          
      - name: Copy FFmpeg build to cache-friendly location
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true' && steps.build-ffmpeg.outcome == 'success'
        shell: msys2 {0}
        run: |
          MSYS_PREFIX="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild"
          CACHE_DIR="C:/ffmpeg-cache-${{ matrix.os.arch }}"
          
          if [ -d "${MSYS_PREFIX}" ]; then
            echo "Copying FFmpeg build to cache location"
            rm -rf "${CACHE_DIR}" 2>/dev/null || true
            mkdir -p "${CACHE_DIR}"
            cp -r "${MSYS_PREFIX}"/* "${CACHE_DIR}/"
            echo "FFmpeg build cached successfully"
          else
            echo "FFmpeg build directory does not exist!"
            exit 1
          fi
      - name: Save FFmpeg cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true' && steps.build-ffmpeg.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: C:\ffmpeg-cache-${{ matrix.os.arch }}
          key: ffmpeg-windows-${{ matrix.os.arch }}-${{ env.CACHE_VERSION_WINDOWS }}-${{ steps.ffmpeg-hash.outputs.hash }}
          
      - name: Install Node dependencies
        run: |
          # Use npm install instead of npm ci to avoid issues with optionalDependencies in Node 24
          npm install --ignore-scripts
          npm install -g prebuildify

      - name: Setup custom node-gyp
        shell: msys2 {0}
        run: |
          # Install and configure custom node-gyp from submodule
          pushd externals/node-gyp
          npm install
          npm link
          popd
          
          # Verify node-gyp is available
          which node-gyp
          node-gyp --version

      - name: Build Native Addon
        shell: msys2 {0}
        run: |
          cp binding-jellyfin.gyp binding.gyp
          
          # Set environment for MSYS2/Clang build
          if [ "${{ matrix.os.msystem }}" = "CLANG64" ]; then
            export CC="clang"
            export CXX="clang++"
            export AR="llvm-ar"
            # Don't set LINK or LD - let node-gyp handle the linker
            PREFIX="/clang64/ffbuild"
          else
            export CC="clang"
            export CXX="clang++"
            export AR="llvm-ar"
            # Don't set LINK or LD - let node-gyp handle the linker
            PREFIX="/clangarm64/ffbuild"
          fi
          
          # Set pkg-config path
          export PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"
          
          # Set include and lib paths
          export CFLAGS="-I${PREFIX}/include"
          export CXXFLAGS="-I${PREFIX}/include"
          export LDFLAGS="-L${PREFIX}/lib"
          
          # Force gyp to use make generator (for Python gyp code)
          export GYP_GENERATORS="make"
          
          # Use our custom node-gyp directly for better control
          # Important: Convert MSYS2 paths to Windows paths for Node.js
          NODE_GYP_PATH="$(cygpath -w $(pwd)/externals/node-gyp/bin/node-gyp.js)"
          
          # Create prebuilds directory structure
          PREBUILD_DIR="prebuilds/win32-${{ matrix.os.arch }}"
          mkdir -p "$PREBUILD_DIR"
          
          # Build with node-gyp directly using make format
          # Use --nodedir to point to MSYS2's Node.js installation
          MSYS_NODE_DIR="/$(echo ${{ matrix.os.msystem }} | tr '[:upper:]' '[:lower:]')"
          
          node "${NODE_GYP_PATH}" rebuild \
            --verbose \
            -f make \
            --arch=${{ matrix.os.arch }} \
            --nodedir="${MSYS_NODE_DIR}" \
            --release
          
          # Copy the built binary to prebuilds
          cp build/Release/node-av.node "$PREBUILD_DIR/node.napi.node"
          
          # Strip the binary
          llvm-strip "$PREBUILD_DIR/node.napi.node"
          
          # Copy binary for tests
          mkdir -p binary
          NODE_FILE=$(find prebuilds -name "*.node" -type f | head -1)
          
          if [ -n "$NODE_FILE" ]; then
            cp "$NODE_FILE" binary/node-av.node
          else
            echo "Error: No .node file found in prebuilds directory"
            exit 1
          fi

      - name: Run Tests
        run: |
          export PKG_CONFIG_PATH="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/lib/pkgconfig:${PKG_CONFIG_PATH}"
          npm run test:all

      - name: Upload Prebuild
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-windows-${{ matrix.os.arch }}
          path: prebuilds/

  build_linux:
    name: 'Linux ${{ matrix.arch }}'
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            target: amd64
            runner: ubuntu-24.04
          - arch: arm64
            target: arm64
            runner: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Get Jellyfin FFmpeg commit hash
        id: ffmpeg-hash
        run: echo "hash=$(git -C externals/jellyfin-ffmpeg rev-parse HEAD)" >> $GITHUB_OUTPUT
      
      - name: Prepare directories
        run: |
          sudo mkdir -p /opt/ffbuild/prefix
          sudo chown -R $USER:$USER /opt/ffbuild
          sudo chmod -R 755 /opt/ffbuild

      - name: Restore FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-linux-${{ matrix.arch }}-${{ env.CACHE_VERSION_LINUX }}-${{ steps.ffmpeg-hash.outputs.hash }}
          restore-keys: ffmpeg-linux-${{ matrix.arch }}-${{ env.CACHE_VERSION_LINUX }}-

      - name: Build FFmpeg
        id: build-ffmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          cd externals/jellyfin-ffmpeg
          
          # Determine target
          if [ "${{ matrix.target }}" = "amd64" ]; then
            TARGET="linux64"
          else
            TARGET="linuxarm64"
          fi
          
          # Use our own Docker image, NOT Jellyfin's (they are private)
          cd builder
          IMAGE="ghcr.io/${{ github.repository }}/${TARGET}-gpl:latest"
          
          # Try to pull our image from registry first
          if docker pull "${IMAGE}" 2>/dev/null; then
            echo "✓ Using our Docker image from registry: ${IMAGE}"
          else
            # If not available, build it locally using Jellyfin's makeimage.sh
            echo "Docker image not in registry, building locally..."
            # Set GITHUB_REPOSITORY so makeimage.sh uses our namespace
            export GITHUB_REPOSITORY="${{ github.repository }}"
            ./makeimage.sh "${TARGET}" gpl
            echo "Docker image built locally: ${IMAGE}"
          fi
          
          # Build FFmpeg using our modified scripts
          # Set GITHUB_REPOSITORY so build.sh uses our Docker images
          export GITHUB_REPOSITORY="${{ github.repository }}"
          ./build.sh "${TARGET}" gpl
          
          # Now extract the prefix directory which contains all headers and static libraries
          if [ -d ffbuild/prefix ]; then
            sudo mkdir -p /opt/ffbuild/prefix
            sudo cp -r ffbuild/prefix/* /opt/ffbuild/prefix/
            
            # Also check if codec libraries are in /opt/ffbuild inside container
            # We might need to extract them from our Docker image
            CONTAINER_ID=$(docker create "ghcr.io/${{ github.repository }}/${TARGET}-gpl:latest")
            # Try to copy codec libraries if they exist
            docker cp "${CONTAINER_ID}:/opt/ffbuild/lib" /tmp/codec-libs 2>/dev/null && {
              sudo cp -n /tmp/codec-libs/*.a /opt/ffbuild/prefix/lib/ 2>/dev/null || true
              rm -rf /tmp/codec-libs
            }
            docker cp "${CONTAINER_ID}:/opt/ffbuild/include" /tmp/codec-includes 2>/dev/null && {
              sudo cp -rn /tmp/codec-includes/* /opt/ffbuild/prefix/include/ 2>/dev/null || true
              rm -rf /tmp/codec-includes
            }
            docker rm "${CONTAINER_ID}"
            
            # Clean up the preserved ffbuild directory now
            rm -rf ffbuild
            
            sudo chown -R $USER:$USER /opt/ffbuild
          else
            echo "Error: ffbuild/prefix not found!"
            exit 1
          fi

          cd ../..
          
      - name: Save FFmpeg cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true' && steps.build-ffmpeg.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-linux-${{ matrix.arch }}-${{ env.CACHE_VERSION_LINUX }}-${{ steps.ffmpeg-hash.outputs.hash }}

      - name: Install Node dependencies
        run: |
          # Use npm install instead of npm ci to avoid issues with optionalDependencies in Node 24
          npm install --ignore-scripts
          npm install -g prebuildify

      - name: Build Native Addon
        run: |
          cp binding-jellyfin.gyp binding.gyp
          
          # Set up environment variables that node-gyp will use
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          
          # Use Clang to match the Docker build environment
          export CC=clang-18
          export CXX=clang++-18
          export AR=llvm-ar-18
          export NM=llvm-nm-18
          export RANLIB=llvm-ranlib-18

          export LD=ld.lld-18
          # Use -Bsymbolic to bind symbols locally and avoid PIC issues
          # Use -z,notext to allow text relocations (needed for assembly code)
          export LDFLAGS="-fuse-ld=lld-18 -Wl,-z,notext -Wl,-Bsymbolic"
          BUILD_LDFLAGS="-L/opt/ffbuild/prefix/lib -fuse-ld=lld-18 -Wl,--allow-multiple-definition -Wl,-z,notext -Wl,-Bsymbolic"
          
          # Build N-API binary with proper include paths
          CFLAGS="-I/opt/ffbuild/prefix/include -fPIC" \
          CXXFLAGS="-I/opt/ffbuild/prefix/include -fPIC" \
          LDFLAGS="$BUILD_LDFLAGS" \
          prebuildify \
            --napi \
            --strip \
            --arch=${{ matrix.arch }} \
            --tag-libc

          # Copy binary for tests
          mkdir -p binary

          NODE_FILE=$(find prebuilds -name "*.node" -type f | head -1)
          
          if [ -n "$NODE_FILE" ]; then
            cp "$NODE_FILE" binary/node-av.node
          else
            echo "Error: No .node file found in prebuilds directory"
            exit 1
          fi

      - name: Run Tests
        run: |
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          npm run test:all

      - name: Upload Prebuild
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-linux-${{ matrix.arch }}
          path: prebuilds/

  build_macos:
    name: 'macOS ${{ matrix.arch }}'
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            runner: macos-13
          - arch: arm64
            runner: macos-14
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install build dependencies
        run: |
          # Install the same dependencies that Jellyfin's 00-dep.sh installs
          # This ensures they're in PATH for all subsequent steps
          # Check each package and only install if not already present
          PACKAGES="wget subversion mercurial autoconf automake cmake meson ninja pkg-config coreutils gcc make python-setuptools pcre2 libtool gnu-sed gnu-tar nasm quilt texinfo"
          
          for pkg in $PACKAGES; do
            if brew ls --versions "$pkg" > /dev/null 2>&1; then
              echo "$pkg is already installed, skipping..."
            else
              echo "Installing $pkg..."
              brew install "$pkg"
            fi
          done

      - name: Get Jellyfin FFmpeg commit hash
        id: ffmpeg-hash
        run: echo "hash=$(git -C externals/jellyfin-ffmpeg rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Prepare directories
        run: |
          sudo mkdir -p /opt/ffbuild/prefix
          sudo chown -R $USER:staff /opt/ffbuild
          sudo chmod -R 755 /opt/ffbuild

      - name: Restore FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-macos-${{ matrix.arch }}-${{ env.CACHE_VERSION_MACOS }}-${{ steps.ffmpeg-hash.outputs.hash }}
          restore-keys: ffmpeg-macos-${{ matrix.arch }}-${{ env.CACHE_VERSION_MACOS }}-

      - name: Build FFmpeg
        id: build-ffmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          cd externals/jellyfin-ffmpeg/builder
          
          # Map our arch names to Jellyfin's
          ARCH_NAME="${{ matrix.arch }}"
          if [ "$ARCH_NAME" = "x64" ]; then
            ARCH_NAME="x86_64"
          fi
          
          # Set deployment target to ensure proper platform load commands in libraries
          export MACOSX_DEPLOYMENT_TARGET="14.0"
          
          # Run the build script
          ./buildmac.sh $ARCH_NAME
          
          # The build script uses /ffbuild/prefix but we need /opt/ffbuild/prefix
          # Also need to run make install to get FFmpeg libraries
          cd ..
          make install DESTDIR="" prefix="/opt/ffbuild/prefix"
          
          # Fix permissions before caching
          sudo chown -R $USER:staff /opt/ffbuild
          
          cd ..
          
      - name: Save FFmpeg cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true' && steps.build-ffmpeg.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-macos-${{ matrix.arch }}-${{ env.CACHE_VERSION_MACOS }}-${{ steps.ffmpeg-hash.outputs.hash }}

      - name: Install Node dependencies
        run: |
          # Use npm install instead of npm ci to avoid issues with optionalDependencies in Node 24
          npm install --ignore-scripts
          npm install -g prebuildify

      - name: Build Native Addon
        run: |
          cp binding-jellyfin.gyp binding.gyp
          
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CFLAGS="-I/opt/ffbuild/prefix/include"
          export CXXFLAGS="-I/opt/ffbuild/prefix/include"
          export LDFLAGS="-L/opt/ffbuild/prefix/lib"
          export MACOSX_DEPLOYMENT_TARGET="14.0"
          
          # Build N-API binary
          prebuildify \
            --napi \
            --strip \
            --arch=${{ matrix.arch }}

          # Copy binary for tests
          mkdir -p binary

          NODE_FILE=$(find prebuilds -name "*.node" -type f | head -1)
          
          if [ -n "$NODE_FILE" ]; then
            cp "$NODE_FILE" binary/node-av.node
          else
            echo "Error: No .node file found in prebuilds directory"
            exit 1
          fi

      - name: Run Tests
        run: |
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          npm run test:all

      - name: Upload Prebuild
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-macos-${{ matrix.arch }}
          path: prebuilds/

  # Package and publish job - only runs when workflow is called from publish workflow
  package:
    name: 'Package and Publish'
    needs: [build_windows, build_linux, build_macos]
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'workflow_call'
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          # Use npm install instead of npm ci to avoid issues with optionalDependencies in Node 24
          npm install --ignore-scripts

      - name: Download all prebuilds
        uses: actions/download-artifact@v5
        with:
          pattern: prebuild-*
          path: prebuilds-artifacts

      - name: Prepare prebuilds structure
        run: |
          mkdir -p prebuilds
          
          # Copy all prebuilds to a single directory structure
          for dir in prebuilds-artifacts/*/; do
            cp -r "$dir"* prebuilds/
          done
          
          echo "Combined prebuilds structure:"
          ls -laR prebuilds/
          
          # Verify we have all expected platforms
          echo "\nVerifying platform coverage:"
          for platform in darwin-x64 darwin-arm64 linux-x64 linux-arm64 win32-x64 win32-arm64; do
            if [ -d "prebuilds/$platform" ]; then
              echo "✓ $platform"
            else
              echo "✗ $platform missing"
              exit 1  # Fail if any platform is missing
            fi
          done

      - name: Create platform packages
        run: |
          # Use the create-platform-packages.js script
          node scripts/create-platform-packages.js
          
          # Copy prebuilds to platform packages
          for platform in darwin-x64 darwin-arm64 linux-x64 linux-arm64 win32-x64 win32-arm64; do
            if [ -d "prebuilds/$platform" ]; then
              # Copy the binary to the package directory
              cp "prebuilds/$platform/node-av.node" "packages/$platform/node-av.node"
              echo "Copied binary for $platform"
            fi
          done
          
          echo "Platform packages created:"
          ls -la packages/
          for pkg in packages/*/; do
            echo "Contents of $pkg:"
            ls -la "$pkg"
          done

      - name: Update version
        run: |
          # Extract version from tag
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "Version: $VERSION"
          
          # Update main package version
          npm version $VERSION --no-git-tag-version
          
          # Update platform package versions
          for pkg in packages/*/package.json; do
            if [ -f "$pkg" ]; then
              cd $(dirname "$pkg")
              npm version $VERSION --no-git-tag-version
              cd -
            fi
          done

      - name: Create release archives
        run: |
          # Create archives for each platform
          for platform in darwin-x64 darwin-arm64 linux-x64 linux-arm64 win32-x64 win32-arm64; do
            if [ -d "prebuilds/$platform" ]; then
              zip -r "node-av-${platform}-${GITHUB_REF#refs/tags/}.zip" "prebuilds/$platform"
            fi
          done
          
          echo "Release archives created:"
          ls -la *.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: '*.zip'
          body: |
            ## node-av Release ${{ github.ref_name }}
            
            ### 📦 Updated Packages
            
            The following platform packages have been updated to ${{ github.ref_name }}:
            - `@seydx/node-av-darwin-arm64@${{ github.ref_name }}`
            - `@seydx/node-av-darwin-x64@${{ github.ref_name }}`
            - `@seydx/node-av-linux-arm64@${{ github.ref_name }}`
            - `@seydx/node-av-linux-x64@${{ github.ref_name }}`
            - `@seydx/node-av-win32-arm64@${{ github.ref_name }}`
            - `@seydx/node-av-win32-x64@${{ github.ref_name }}`
            ```

      - name: Publish to NPM
        run: |
          # Publish main package
          npm publish --access public
          
          # Publish platform packages
          for pkg_dir in packages/*/; do
            if [ -d "$pkg_dir" ]; then
              cd "$pkg_dir"
              npm publish --access public
              cd -
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}