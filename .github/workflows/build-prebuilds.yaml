name: '🏗️ Build Prebuilds'

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
  workflow_dispatch:

env:
  # Define target versions here
  NODE_TARGETS: "22.0.0 24.0.0"  # Can add more: "22.0.0 24.0.0"
  ELECTRON_TARGETS: "37.0.0 38.0.0"  # Can add more: "37.0.0 38.0.0"

jobs:
  build_mac:
    name: 'macOS ${{ matrix.arch }}'
    runs-on: macos-13
    strategy:
      matrix:
        include:
          - arch: x64
            target: mac64
          - arch: arm64
            target: macarm64
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install Dependencies
        run: |
          brew install nasm yasm pkg-config
          npm ci --ignore-scripts
          npm install --no-save prebuildify

      - name: Build FFmpeg Libraries & Node.js Bindings
        run: |
          sudo mkdir -p /opt/ffbuild
          sudo chmod 777 /opt/ffbuild
          chmod +x scripts/build-with-jellyfin.sh
          ./scripts/build-with-jellyfin.sh darwin ${{ matrix.target }}

      - name: Get Package Version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cd prebuilds
          
          # Package each runtime/ABI combination
          for dir in darwin-${{ matrix.arch }}; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*.node; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  # Extract runtime and ABI from filename
                  # Format: node.abi127.node or electron.abi134.node
                  if [[ "$filename" =~ (node|electron)\.abi([0-9]+)\.node ]]; then
                    runtime="${BASH_REMATCH[1]}"
                    abi="${BASH_REMATCH[2]}"
                    artifact_name="av-darwin-${{ matrix.arch }}-${{ steps.version.outputs.version }}-${runtime}-${abi}.zip"
                    (cd "$dir" && zip -j "../../artifacts/${artifact_name}" "$(basename "$file")")
                    # Rename the .node file inside the zip to av.node
                    (cd ../../artifacts && zip -u "${artifact_name}" -j && printf "@ $(basename "$file")\n@=av.node\n" | zipnote -w "${artifact_name}")
                  fi
                fi
              done
            fi
          done
          
          ls -la artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: av-${{ matrix.target }}
          path: artifacts/*.zip

  build_linux:
    name: 'Linux ${{ matrix.arch }}'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x64
            target: linux64
          - arch: arm64
            target: linuxarm64
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: |
          npm ci --ignore-scripts
          npm install --no-save prebuildify

      - name: Build FFmpeg Libraries & Node.js Bindings
        run: |
          chmod +x scripts/build-with-jellyfin.sh
          ./scripts/build-with-jellyfin.sh linux ${{ matrix.target }}

      - name: Get Package Version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cd prebuilds
          
          # Package each runtime/ABI combination
          for dir in linux-${{ matrix.arch }}; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*.node; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  # Extract runtime and ABI from filename
                  if [[ "$filename" =~ (node|electron)\.abi([0-9]+)\.node ]]; then
                    runtime="${BASH_REMATCH[1]}"
                    abi="${BASH_REMATCH[2]}"
                    artifact_name="av-linux-${{ matrix.arch }}-${{ steps.version.outputs.version }}-${runtime}-${abi}.zip"
                    (cd "$dir" && zip -j "../../artifacts/${artifact_name}" "$(basename "$file")")
                    # Rename the .node file inside the zip to av.node
                    (cd ../../artifacts && zip -u "${artifact_name}" -j && printf "@ $(basename "$file")\n@=av.node\n" | zipnote -w "${artifact_name}")
                  fi
                fi
              done
            fi
          done
          
          ls -la artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: av-${{ matrix.target }}
          path: artifacts/*.zip

  build_windows:
    name: 'Windows ${{ matrix.arch }}'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x64
            target: win64
          - arch: arm64
            target: winarm64
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 nasm yasm
          npm ci --ignore-scripts
          npm install --no-save prebuildify node-abi

      - name: Build FFmpeg Libraries & Node.js Bindings
        run: |
          chmod +x scripts/build-with-jellyfin.sh
          ./scripts/build-with-jellyfin.sh win ${{ matrix.target }}

      - name: Get Package Version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cd prebuilds
          
          # Package each runtime/ABI combination
          for dir in win32-${{ matrix.arch }}; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*.node; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  # Extract runtime and ABI from filename
                  if [[ "$filename" =~ (node|electron)\.abi([0-9]+)\.node ]]; then
                    runtime="${BASH_REMATCH[1]}"
                    abi="${BASH_REMATCH[2]}"
                    artifact_name="av-win32-${{ matrix.arch }}-${{ steps.version.outputs.version }}-${runtime}-${abi}.zip"
                    (cd "$dir" && zip -j "../../artifacts/${artifact_name}" "$(basename "$file")")
                    # Rename the .node file inside the zip to av.node
                    (cd ../../artifacts && zip -u "${artifact_name}" -j && printf "@ $(basename "$file")\n@=av.node\n" | zipnote -w "${artifact_name}")
                  fi
                fi
              done
            fi
          done
          
          ls -la artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: av-${{ matrix.target }}
          path: artifacts/*.zip

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_mac, build_linux, build_windows]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/download-artifact@v4

      - name: List all artifacts
        run: ls -la **/*.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: '**/*.zip'
          body: |
            ## @seydx/av Prebuilds
            
            Statically linked with Jellyfin FFmpeg libraries
            
            ### Supported Platforms
            - macOS (x64, arm64)
            - Linux (x64, arm64)
            - Windows (x64, arm64)
            
            ### Supported Runtimes
            - Node.js v22+ 
            - Electron v37+
            
            ### Binary Naming Convention
            `av-{platform}-{arch}-{version}-{runtime}-{abi}.zip`
            
            Example: `av-darwin-arm64-0.1.0-electron-134.zip`