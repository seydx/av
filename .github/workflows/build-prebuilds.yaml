name: '🏗️ Build Prebuilds'

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
  workflow_dispatch:

env:
  # Define target versions here
  NODE_TARGETS: "22.0.0 24.0.0"  # Can add more: "22.0.0 24.0.0"
  ELECTRON_TARGETS: "37.0.0 38.0.0"  # Can add more: "37.0.0 38.0.0"

jobs:
  build_mac:
    name: 'macOS ${{ matrix.arch }}'
    runs-on: macos-13
    strategy:
      matrix:
        include:
          - arch: x64
            target: mac64
          - arch: arm64
            target: macarm64
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install Dependencies
        run: |
          # Install all dependencies required by Jellyfin's buildmac.sh
          brew install wget subversion mercurial autoconf automake cmake meson ninja pkg-config coreutils gcc make python-setuptools pcre2 libtool gnu-sed gnu-tar nasm yasm quilt texinfo
          # Ensure gsed is available (gnu-sed installs it as gsed)
          which gsed || brew link --force gnu-sed
          npm ci --ignore-scripts
          npm install --no-save prebuildify

      - name: Cache FFmpeg Libraries
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-jellyfin-macos-${{ matrix.arch }}-${{ hashFiles('externals/jellyfin-ffmpeg/**') }}-v2
          restore-keys: |
            ffmpeg-jellyfin-macos-${{ matrix.arch }}-
          save-always: true
      
      - name: Build FFmpeg Libraries
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          # Setup build environment
          sudo mkdir -p /opt/ffbuild/bin /opt/ffbuild/prefix
          sudo chmod -R 777 /opt/ffbuild
          # Copy Jellyfin's helper scripts
          sudo cp externals/jellyfin-ffmpeg/builder/images/base/git-mini-clone.sh /opt/ffbuild/bin/git-mini-clone
          sudo chmod +x /opt/ffbuild/bin/git-mini-clone
          sudo cp externals/jellyfin-ffmpeg/builder/images/base/retry-tool.sh /opt/ffbuild/bin/retry-tool
          sudo chmod +x /opt/ffbuild/bin/retry-tool
          sudo cp externals/jellyfin-ffmpeg/builder/images/base/check-wget.sh /opt/ffbuild/bin/check-wget
          sudo chmod +x /opt/ffbuild/bin/check-wget
          
          # Set environment and build
          export PATH="/opt/ffbuild/bin:$PATH"
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          
          cd externals/jellyfin-ffmpeg
          cd builder
          # Map GitHub arch to Jellyfin arch
          if [ "${{ matrix.arch }}" = "x64" ]; then
            ./buildmac.sh x86_64
          else
            ./buildmac.sh arm64
          fi
          cd ..
          cd ../..
          
      - name: Build Node.js Bindings
        run: |
          # Use Jellyfin binding configuration
          cp binding-jellyfin.gyp binding.gyp
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CFLAGS="-I/opt/ffbuild/prefix/include"
          export CXXFLAGS="-I/opt/ffbuild/prefix/include"
          export LDFLAGS="-L/opt/ffbuild/prefix/lib"
          for target in $NODE_TARGETS; do
            echo "Building for Node.js v${target}..."
            npx prebuildify \
              --runtime=node \
              --target="${target}" \
              --arch=${{ matrix.arch }} \
              --strip \
              --tag-libc
          done
          
      - name: Build Electron Bindings
        run: |
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CFLAGS="-I/opt/ffbuild/prefix/include"
          export CXXFLAGS="-I/opt/ffbuild/prefix/include"
          export LDFLAGS="-L/opt/ffbuild/prefix/lib"
          for target in $ELECTRON_TARGETS; do
            echo "Building for Electron v${target}..."
            npx prebuildify \
              --runtime=electron \
              --target="${target}" \
              --arch=${{ matrix.arch }} \
              --strip \
              --tag-libc
          done

      - name: Get Package Version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cd prebuilds
          
          # Package each runtime/ABI combination
          for dir in darwin-${{ matrix.arch }}; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*.node; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  # Extract runtime and ABI from filename
                  # Format: node.abi127.node or electron.abi134.node
                  if [[ "$filename" =~ (node|electron)\.abi([0-9]+)\.node ]]; then
                    runtime="${BASH_REMATCH[1]}"
                    abi="${BASH_REMATCH[2]}"
                    artifact_name="av-darwin-${{ matrix.arch }}-${{ steps.version.outputs.version }}-${runtime}-${abi}.zip"
                    (cd "$dir" && zip -j "../../artifacts/${artifact_name}" "$(basename "$file")")
                    # Rename the .node file inside the zip to av.node
                    (cd ../../artifacts && zip -u "${artifact_name}" -j && printf "@ $(basename "$file")\n@=av.node\n" | zipnote -w "${artifact_name}")
                  fi
                fi
              done
            fi
          done
          
          ls -la artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: av-${{ matrix.target }}
          path: artifacts/*.zip

  build_linux:
    name: 'Linux ${{ matrix.arch }}'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x64
            target: linux64
          - arch: arm64
            target: linuxarm64
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: |
          npm ci --ignore-scripts
          npm install --no-save prebuildify

      - name: Cache FFmpeg Libraries
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: |
            externals/bin
          key: ffmpeg-jellyfin-linux-${{ matrix.arch }}-${{ hashFiles('externals/jellyfin-ffmpeg/**') }}-v1
          restore-keys: |
            ffmpeg-jellyfin-linux-${{ matrix.arch }}-
          save-always: true
      
      - name: Build FFmpeg Libraries
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          cd externals/jellyfin-ffmpeg
          # Pull the prebuilt Docker image instead of building it
          if [ "${{ matrix.arch }}" = "x64" ]; then
            docker pull ghcr.io/jellyfin/jellyfin-ffmpeg/linux64-gpl:latest
            ./builder/build.sh linux64 gpl
            mv builder/artifacts/jellyfin-ffmpeg*portable_linux64-gpl*.tar.xz ../bin/
          else
            docker pull ghcr.io/jellyfin/jellyfin-ffmpeg/linuxarm64-gpl:latest
            ./builder/build.sh linuxarm64 gpl
            mv builder/artifacts/jellyfin-ffmpeg*portable_linuxarm64-gpl*.tar.xz ../bin/
          fi
          cd ../..
          
      - name: Extract FFmpeg Libraries
        run: |
          # Extract cached or freshly built FFmpeg
          if [ -d "externals/bin" ]; then
            cd externals/bin
            sudo mkdir -p /opt/ffbuild
            sudo tar -xf jellyfin-ffmpeg*portable_linux*.tar.xz -C /opt/ffbuild --strip-components=1
            cd ../..
          fi
          
      - name: Build Node.js Bindings
        run: |
          # Use Jellyfin binding configuration
          cp binding-jellyfin.gyp binding.gyp
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CFLAGS="-I/opt/ffbuild/prefix/include"
          export CXXFLAGS="-I/opt/ffbuild/prefix/include"
          export LDFLAGS="-L/opt/ffbuild/prefix/lib"
          for target in $NODE_TARGETS; do
            echo "Building for Node.js v${target}..."
            npx prebuildify \
              --runtime=node \
              --target="${target}" \
              --arch=${{ matrix.arch }} \
              --strip \
              --tag-libc
          done
          
      - name: Build Electron Bindings
        run: |
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CFLAGS="-I/opt/ffbuild/prefix/include"
          export CXXFLAGS="-I/opt/ffbuild/prefix/include"
          export LDFLAGS="-L/opt/ffbuild/prefix/lib"
          for target in $ELECTRON_TARGETS; do
            echo "Building for Electron v${target}..."
            npx prebuildify \
              --runtime=electron \
              --target="${target}" \
              --arch=${{ matrix.arch }} \
              --strip \
              --tag-libc
          done

      - name: Get Package Version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cd prebuilds
          
          # Package each runtime/ABI combination
          for dir in linux-${{ matrix.arch }}; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*.node; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  # Extract runtime and ABI from filename
                  if [[ "$filename" =~ (node|electron)\.abi([0-9]+)\.node ]]; then
                    runtime="${BASH_REMATCH[1]}"
                    abi="${BASH_REMATCH[2]}"
                    artifact_name="av-linux-${{ matrix.arch }}-${{ steps.version.outputs.version }}-${runtime}-${abi}.zip"
                    (cd "$dir" && zip -j "../../artifacts/${artifact_name}" "$(basename "$file")")
                    # Rename the .node file inside the zip to av.node
                    (cd ../../artifacts && zip -u "${artifact_name}" -j && printf "@ $(basename "$file")\n@=av.node\n" | zipnote -w "${artifact_name}")
                  fi
                fi
              done
            fi
          done
          
          ls -la artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: av-${{ matrix.target }}
          path: artifacts/*.zip

  build_windows:
    name: 'Windows ${{ matrix.os.arch }}'
    runs-on: ${{ matrix.os.runner }}
    strategy:
      matrix:
        os:
          - arch: x64
            runner: windows-latest
            msystem: CLANG64
            toolchain: mingw-w64-clang-x86_64-toolchain
            nasm: mingw-w64-clang-x86_64-nasm
            build_script: ./msys2/build.sh
          - arch: arm64
            runner: windows-11-arm
            msystem: CLANGARM64
            toolchain: mingw-w64-clang-aarch64-toolchain
            nasm: mingw-w64-clang-aarch64-nasm
            build_script: ./msys2/buildarm64.sh
    defaults:
      run:
        shell: msys2 {0}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.os.msystem }}
          install: >-
            git
            curl
            wget
            zip
            patch
            diffutils
            quilt
            diffstat
            make
            cmake
            nasm
            ${{ matrix.os.toolchain }}
            ${{ matrix.os.nasm }}
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-python
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-make
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-cmake
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-gcc
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-pkg-config
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-autotools

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Node Dependencies
        shell: bash
        run: |
          npm ci --ignore-scripts
          npm install --no-save prebuildify

      - name: Cache FFmpeg Libraries
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: |
            /clang64/ffbuild
            /clangarm64/ffbuild
          key: ffmpeg-jellyfin-windows-${{ matrix.os.arch }}-${{ hashFiles('externals/jellyfin-ffmpeg/**') }}-v1
          restore-keys: |
            ffmpeg-jellyfin-windows-${{ matrix.os.arch }}-
          save-always: true
      
      - name: Build FFmpeg Libraries
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          # Update pacman database and retry on failures
          pacman -Syy --noconfirm || pacman -Syy --noconfirm
          cd externals/jellyfin-ffmpeg
          ${{ matrix.os.build_script }}
          cd ../..

      - name: Build Node.js Bindings
        shell: bash
        run: |
          # Use Jellyfin binding configuration
          cp binding-jellyfin.gyp binding.gyp
          if [ "${{ matrix.os.msystem }}" = "CLANG64" ]; then
            export PKG_CONFIG_PATH="/clang64/ffbuild/lib/pkgconfig:${PKG_CONFIG_PATH}"
          else
            export PKG_CONFIG_PATH="/clangarm64/ffbuild/lib/pkgconfig:${PKG_CONFIG_PATH}"
          fi
          for target in $NODE_TARGETS; do
            echo "Building for Node.js v${target}..."
            npx prebuildify \
              --runtime=node \
              --target="${target}" \
              --arch=${{ matrix.os.arch }} \
              --strip \
              --tag-libc
          done
          
      - name: Build Electron Bindings
        shell: bash
        run: |
          if [ "${{ matrix.os.msystem }}" = "CLANG64" ]; then
            export PKG_CONFIG_PATH="/clang64/ffbuild/lib/pkgconfig:${PKG_CONFIG_PATH}"
          else
            export PKG_CONFIG_PATH="/clangarm64/ffbuild/lib/pkgconfig:${PKG_CONFIG_PATH}"
          fi
          for target in $ELECTRON_TARGETS; do
            echo "Building for Electron v${target}..."
            npx prebuildify \
              --runtime=electron \
              --target="${target}" \
              --arch=${{ matrix.os.arch }} \
              --strip \
              --tag-libc
          done

      - name: Get Package Version
        shell: bash
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Package Artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          cd prebuilds
          
          # Package each runtime/ABI combination
          for dir in win32-${{ matrix.os.arch }}; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*.node; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  # Extract runtime and ABI from filename
                  if [[ "$filename" =~ (node|electron)\.abi([0-9]+)\.node ]]; then
                    runtime="${BASH_REMATCH[1]}"
                    abi="${BASH_REMATCH[2]}"
                    artifact_name="av-win32-${{ matrix.os.arch }}-${{ steps.version.outputs.version }}-${runtime}-${abi}.zip"
                    (cd "$dir" && zip -j "../../artifacts/${artifact_name}" "$(basename "$file")")
                    # Rename the .node file inside the zip to av.node
                    (cd ../../artifacts && zip -u "${artifact_name}" -j && printf "@ $(basename "$file")\n@=av.node\n" | zipnote -w "${artifact_name}")
                  fi
                fi
              done
            fi
          done
          
          ls -la artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: av-win${{ matrix.os.arch == 'arm64' && 'arm64' || '64' }}
          path: artifacts/*.zip

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_mac, build_linux, build_windows]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/download-artifact@v4

      - name: List all artifacts
        run: ls -la **/*.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: '**/*.zip'
          body: |
            ## @seydx/av Prebuilds
            
            Statically linked with Jellyfin FFmpeg libraries
            
            ### Supported Platforms
            - macOS (x64, arm64)
            - Linux (x64, arm64)
            - Windows (x64, arm64)
            
            ### Supported Runtimes
            - Node.js v22+ 
            - Electron v37+
            
            ### Binary Naming Convention
            `av-{platform}-{arch}-{version}-{runtime}-{abi}.zip`
            
            Example: `av-darwin-arm64-0.1.0-electron-134.zip`