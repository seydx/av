name: "🏗️ Build Prebuilds"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CACHE_VERSION_WINDOWS: "v13"
  CACHE_VERSION_LINUX: "v26"
  CACHE_VERSION_MACOS: "v11"
  JELLYFIN_FFMPEG_HASH: "21198ee5630df2b0dabe4bb416e6c9c4a32522ed"
  UPLOAD_CACHES: true

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: false
        description: "NPM token for publishing packages"
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "test/**"
      - "externals/jellyfin-ffmpeg/**"
      - ".github/workflows/build-prebuilds.yaml"
      - "binding-jellyfin.gyp"
  pull_request:
    paths:
      - "src/**"
      - "test/**"
      - "externals/jellyfin-ffmpeg/**"
      - ".github/workflows/build-prebuilds.yaml"
      - "binding-jellyfin.gyp"

jobs:
  build_windows_mingw:
    name: "Windows MinGW ${{ matrix.os.arch }}"
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: CLANG64
            arch: x64
            runner: windows-2022
            msystem: CLANG64
            toolchain: mingw-w64-clang-x86_64-toolchain
            nasm: mingw-w64-clang-x86_64-nasm
            build_script: ./msys2/build.sh
          - name: CLANGARM64
            arch: arm64
            runner: windows-11-arm
            msystem: CLANGARM64
            toolchain: mingw-w64-clang-aarch64-toolchain
            nasm: mingw-w64-clang-aarch64-nasm
            build_script: ./msys2/buildarm64.sh
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.os.msystem }}
          install: >-
            git
            curl
            wget
            zip
            ${{ matrix.os.toolchain }}
            quilt
            diffstat
            ${{ matrix.os.nasm }}
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-python
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-nodejs
            mingw-w64-${{ matrix.os.msystem == 'CLANG64' && 'clang-x86_64' || 'clang-aarch64' }}-gcc

      - uses: actions/checkout@v5
        with:
          submodules: true

      - uses: actions/setup-node@v5
        with:
          node-version: "24"

      - name: Get Jellyfin FFmpeg commit hash
        id: ffmpeg-hash
        shell: bash
        run: |
          if [ -n "${{ env.JELLYFIN_FFMPEG_HASH }}" ]; then
            echo "hash=${{ env.JELLYFIN_FFMPEG_HASH }}" >> $GITHUB_OUTPUT
          else
            echo "hash=$(git -C externals/jellyfin-ffmpeg rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Prepare directories
        run: |
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/lib/pkgconfig
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/include
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/bin

      - name: Restore FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: C:\ffmpeg-cache-${{ matrix.os.arch }}
          key: ffmpeg-windows-mingw-${{ matrix.os.arch }}-${{ env.CACHE_VERSION_WINDOWS }}-${{ steps.ffmpeg-hash.outputs.hash }}
          restore-keys: |
            ffmpeg-windows-mingw-${{ matrix.os.arch }}-${{ env.CACHE_VERSION_WINDOWS }}-${{ steps.ffmpeg-hash.outputs.hash }}
            ffmpeg-windows-mingw-${{ matrix.os.arch }}-${{ env.CACHE_VERSION_WINDOWS }}-

      - name: Copy cache to MSYS2 location
        if: steps.cache-ffmpeg.outputs.cache-hit == 'true'
        shell: msys2 {0}
        run: |
          CACHE_DIR="C:/ffmpeg-cache-${{ matrix.os.arch }}"
          MSYS_PREFIX="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild"

          if [ -d "${CACHE_DIR}" ]; then
            echo "Restoring FFmpeg cache from ${CACHE_DIR} to ${MSYS_PREFIX}"
            rm -rf "${MSYS_PREFIX}" 2>/dev/null || true
            mkdir -p "${MSYS_PREFIX}"
            cp -r "${CACHE_DIR}"/* "${MSYS_PREFIX}/"
            echo "Cache restored successfully"
          else
            echo "Cache directory ${CACHE_DIR} not found!"
            exit 1
          fi

      - name: Build FFmpeg
        id: build-ffmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          # Clear out MSYS2 ffbuild to avoid conflicts
          rm -rf /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/lib/pkgconfig
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/include
          mkdir -p /${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/bin

          cd externals/jellyfin-ffmpeg/msys2

          # Run Jellyfin build script
          if [ "${{ matrix.os.arch }}" = "arm64" ]; then
            ./buildarm64.sh
          else
            ./build.sh
          fi

          PREFIX="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild"

          # Install FFmpeg libraries
          cd ..
          make install

          # Copy FFmpeg libraries to main lib directory
          if [ -d "${PREFIX}/jellyfin-ffmpeg/lib" ]; then
            cp ${PREFIX}/jellyfin-ffmpeg/lib/*.a ${PREFIX}/lib/ 2>/dev/null || true
            cp -r ${PREFIX}/jellyfin-ffmpeg/include/* ${PREFIX}/include/ 2>/dev/null || true
            
            if [ -d "${PREFIX}/jellyfin-ffmpeg/lib/pkgconfig" ]; then
              mkdir -p ${PREFIX}/lib/pkgconfig
              cp ${PREFIX}/jellyfin-ffmpeg/lib/pkgconfig/*.pc ${PREFIX}/lib/pkgconfig/ 2>/dev/null || true
            fi
          fi

      - name: Copy FFmpeg build to cache-friendly location
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true' && steps.build-ffmpeg.outcome == 'success'
        shell: msys2 {0}
        run: |
          MSYS_PREFIX="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild"
          CACHE_DIR="C:/ffmpeg-cache-${{ matrix.os.arch }}"

          if [ -d "${MSYS_PREFIX}" ]; then
            echo "Copying FFmpeg build to cache location"
            rm -rf "${CACHE_DIR}" 2>/dev/null || true
            mkdir -p "${CACHE_DIR}"
            cp -r "${MSYS_PREFIX}"/* "${CACHE_DIR}/"
            echo "FFmpeg build cached successfully"
          else
            echo "FFmpeg build directory does not exist!"
            exit 1
          fi
      - name: Save FFmpeg cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true' && steps.build-ffmpeg.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: C:\ffmpeg-cache-${{ matrix.os.arch }}
          key: ffmpeg-windows-${{ matrix.os.arch }}-${{ env.CACHE_VERSION_WINDOWS }}-${{ steps.ffmpeg-hash.outputs.hash }}

      - name: Upload FFmpeg cache as artifact
        if: env.UPLOAD_CACHES == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-cache-windows-${{ matrix.os.arch }}
          path: C:\ffmpeg-cache-${{ matrix.os.arch }}
          retention-days: 7

      - name: Install Node dependencies
        run: |
          npm install --ignore-scripts
          npm install -g prebuildify

      - name: Setup custom node-gyp
        shell: msys2 {0}
        run: |
          # Install and configure custom node-gyp from submodule
          pushd externals/node-gyp
          npm install
          npm link
          popd

          # Verify node-gyp is available
          which node-gyp
          node-gyp --version

      - name: Build Native Addon
        shell: msys2 {0}
        run: |
          cp binding-jellyfin.gyp binding.gyp

          if [ "${{ matrix.os.msystem }}" = "CLANG64" ]; then
            PREFIX="/clang64/ffbuild"
          else
            PREFIX="/clangarm64/ffbuild"
          fi

          # Set environment for MSYS2/Clang build
          export CC="clang"
          export CXX="clang++"
          export AR="llvm-ar"

          # Set pkg-config path
          export PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"

          # Set include and lib paths
          export CFLAGS="-I${PREFIX}/include"
          export CXXFLAGS="-I${PREFIX}/include"
          export LDFLAGS="-L${PREFIX}/lib"

          # Use our custom node-gyp directly for better control
          NODE_GYP_PATH="$(pwd)/externals/node-gyp/bin/node-gyp.js"
          NODE_GYP_WIN_PATH="$(cygpath -w $NODE_GYP_PATH)"

          # Use --nodedir to point to MSYS2's Node.js installation
          NODE_PATH="/$(echo ${{ matrix.os.msystem }} | tr '[:upper:]' '[:lower:]')"
          NODE_WIN_PATH="$(cygpath -w $NODE_PATH)"

          # In MSYS2, make is usually called mingw32-make
          # Use --make to point to the correct make binary
          MAKE_PATH="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/bin/mingw32-make.exe"
          MAKE_WIN_PATH="$(cygpath -w $MAKE_PATH)"

          node "${NODE_GYP_WIN_PATH}" rebuild \
            --verbose \
            --arch=${{ matrix.os.arch }} \
            --nodedir="${NODE_WIN_PATH}" \
            --make="${MAKE_WIN_PATH}" \
            --release

          # Create prebuilds directory structure
          PREBUILD_DIR="prebuilds/win32-${{ matrix.os.arch }}"
          mkdir -p "$PREBUILD_DIR"

          # Find the built .node file and copy it with consistent naming
          NODE_FILE=$(find build/Release -name "*.node" -type f | head -1)
          if [ -n "$NODE_FILE" ]; then
            cp "$NODE_FILE" "$PREBUILD_DIR/node-av.node"
            echo "Copied $(basename $NODE_FILE) -> node-av.node"
            
            # Strip the binary
            llvm-strip "$PREBUILD_DIR/node-av.node"
            
            # Copy binary for tests
            mkdir -p binary
            cp "$PREBUILD_DIR/node-av.node" binary/node-av.node
            echo "Copied binary for tests"
          else
            echo "Error: No .node file found in build/Release"
            exit 1
          fi

      - name: Run Tests
        run: |
          export PKG_CONFIG_PATH="/${{ matrix.os.msystem == 'CLANG64' && 'clang64' || 'clangarm64' }}/ffbuild/lib/pkgconfig:${PKG_CONFIG_PATH}"
          npm run test:all

      - name: Upload Prebuild
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-windows-mingw-${{ matrix.os.arch }}
          path: prebuilds/

  build_windows_msvc:
    name: "Windows MSVC ${{ matrix.arch }}"
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    env:
      SDK_VER: 10.0.22621.0
    steps:
      - uses: actions/checkout@v5

      - name: Pull submodules
        shell: bash
        run: |
          # Initialize av submodules first
          git submodule update --init
          # Then initialize ffmpeg-msvc's submodules with depth 1
          cd externals/ffmpeg-msvc
          git submodule update --init --recursive --depth 1
          cd ../..

      - uses: actions/setup-node@v5
        with:
          node-version: "24"

      - name: Setup Environment
        shell: bash
        id: setup
        run: |
          echo "installationPath=$(vswhere -all -legacy -property installationPath)" >> $GITHUB_OUTPUT
          echo "target=${{contains(matrix.arch,'arm')&&format('amd64_{0}',matrix.arch)||matrix.arch}}" >> $GITHUB_OUTPUT

      - name: Get ffmpeg-msvc commit hash
        id: ffmpeg-hash
        shell: bash
        run: |
          echo "hash=$(git -C externals/ffmpeg-msvc rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Restore FFmpeg MSVC cache
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: D:\ffmpeg-msvc-cache-${{ matrix.arch }}
          key: ffmpeg-msvc-${{ matrix.arch }}-${{ env.CACHE_VERSION_WINDOWS_MSVC }}-${{ steps.ffmpeg-hash.outputs.hash }}
          restore-keys: |
            ffmpeg-msvc-${{ matrix.arch }}-${{ env.CACHE_VERSION_WINDOWS_MSVC }}-

      - name: Copy cache to build location
        if: steps.cache-ffmpeg.outputs.cache-hit == 'true'
        shell: cmd
        run: |
          echo Restoring FFmpeg MSVC cache from D:\ffmpeg-msvc-cache-${{ matrix.arch }}
          if exist "D:\ffmpeg-msvc-cache-${{ matrix.arch }}" (
            xcopy /E /I /Y "D:\ffmpeg-msvc-cache-${{ matrix.arch }}" "D:\a\_temp\msys64\usr\local"
            echo Cache restored successfully
          ) else (
            echo Cache directory not found
            exit 1
          )

      - name: Install MSYS2
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        uses: msys2/setup-msys2@v2
        with:
          install: >-
            diffutils
            make
            zip
            pkgconf
            yasm
            nasm
            libtool
            bison
            automake
            autoconf
            quilt
            clang

      - name: Setup Python for Meson
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Meson and Ninja
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: cmd
        run: pip install meson ninja

      - name: Install CUDA Toolkit
        if: matrix.arch == 'x64' && steps.cache-ffmpeg.outputs.cache-hit != 'true'
        uses: N-Storm/cuda-toolkit@master
        id: cuda-toolkit
        with:
          cuda: "12.6.3"
          sub-packages: '["nvcc", "cudart", "npp_dev"]'

      - name: Remove MSYS2 link
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          rm $(which link)
          rm -rf /usr/local

      - name: Build Meson dependencies
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          CALL "${{steps.setup.outputs.installationPath}}\VC\Auxiliary\Build\vcvarsall.bat" ${{steps.setup.outputs.target}} ${{env.SDK_VER}}

          REM Add MSYS2 tools (nasm, yasm) to PATH
          set PATH=D:\a\_temp\msys64\usr\bin;%PATH%

          REM Build dav1d (AV1 decoder)
          if exist externals\ffmpeg-msvc\dav1d (
            echo Building dav1d...
            cd externals\ffmpeg-msvc\dav1d

            REM Create cross-file for ARM64 builds
            if "${{matrix.arch}}" == "arm64" (
              echo [binaries] > cross.txt
              echo c = 'cl' >> cross.txt
              echo ar = 'lib' >> cross.txt
              echo [host_machine] >> cross.txt
              echo system = 'windows' >> cross.txt
              echo cpu_family = 'aarch64' >> cross.txt
              echo cpu = 'aarch64' >> cross.txt
              echo endian = 'little' >> cross.txt
              REM Disable assembly for ARM64 cross-compilation
              meson setup build --cross-file cross.txt --prefix=D:\a\_temp\msys64\usr\local --buildtype=release --default-library=static -Denable_tools=false -Denable_tests=false -Denable_asm=false -Db_vscrt=mt
            ) else (
              meson setup build --prefix=D:\a\_temp\msys64\usr\local --buildtype=release --default-library=static -Denable_tools=false -Denable_tests=false -Db_vscrt=mt
            )

            meson compile -C build
            meson install -C build

            REM Meson installs as libdav1d.a, but FFmpeg expects dav1d.lib
            if exist D:\a\_temp\msys64\usr\local\lib\libdav1d.a (
              echo Copying libdav1d.a to dav1d.lib for FFmpeg
              copy D:\a\_temp\msys64\usr\local\lib\libdav1d.a D:\a\_temp\msys64\usr\local\lib\dav1d.lib
              copy D:\a\_temp\msys64\usr\local\lib\libdav1d.a D:\a\_temp\msys64\usr\local\lib\libdav1d.lib
            )

            cd ..\..\..
            echo DEP_DAV1D=1>> %GITHUB_ENV%
          )

      - name: Build zimg with MSVC
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          CALL "${{steps.setup.outputs.installationPath}}\VC\Auxiliary\Build\vcvarsall.bat" ${{steps.setup.outputs.target}} ${{env.SDK_VER}}

          REM Build zimg using MSBuild
          if exist externals\ffmpeg-msvc\zimg (
            echo Building zimg...
            cd externals\ffmpeg-msvc\zimg\_msvc

            REM Determine platform for MSBuild
            if "${{matrix.arch}}" == "arm64" (
              set PLATFORM=ARM64
            ) else (
              set PLATFORM=x64
            )

            MSBuild zimg.sln -p:Configuration=Release -p:Platform=%PLATFORM% -p:RuntimeLibrary=MT

            REM Install headers
            if not exist D:\a\_temp\msys64\usr\local\include\zimg mkdir D:\a\_temp\msys64\usr\local\include\zimg
            copy ..\src\zimg\api\zimg.h D:\a\_temp\msys64\usr\local\include\zimg\

            REM Find and install the library
            if not exist D:\a\_temp\msys64\usr\local\lib mkdir D:\a\_temp\msys64\usr\local\lib
            for /R %PLATFORM%\Release %%f in (*.lib) do (
              echo Found library: %%f
              copy "%%f" D:\a\_temp\msys64\usr\local\lib\zimg.lib
              copy "%%f" D:\a\_temp\msys64\usr\local\lib\libzimg.lib
            )

            cd ..\..\..
            echo DEP_ZIMG=1>> %GITHUB_ENV%
          )

      - name: Build LAME with MSVC
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          CALL "${{steps.setup.outputs.installationPath}}\VC\Auxiliary\Build\vcvarsall.bat" ${{steps.setup.outputs.target}} ${{env.SDK_VER}}

          REM Build LAME MP3 encoder
          if exist externals\ffmpeg-msvc\lame (
            echo Building LAME...
            cd externals\ffmpeg-msvc\lame

            REM Copy configMS.h to config.h
            copy configMS.h config.h

            REM Set architecture-specific options and machine type
            if "${{matrix.arch}}" == "arm64" (
              REM Patch Makefile.MSVC to use correct machine type for ARM64
              powershell -Command "(Get-Content Makefile.MSVC) -replace 'MACHINE = /machine:I386', 'MACHINE = /machine:ARM64' | Set-Content Makefile.MSVC"
            ) else (
              REM Patch Makefile.MSVC to use correct machine type for x64
              powershell -Command "(Get-Content Makefile.MSVC) -replace 'MACHINE = /machine:I386', 'MACHINE = /machine:X64' | Set-Content Makefile.MSVC"
            )

            REM Also remove obsolete compiler flags that cause warnings
            powershell -Command "(Get-Content Makefile.MSVC) -replace '/QIfdiv /QI0f /YX', '' | Set-Content Makefile.MSVC"

            REM Build static library only
            nmake -f Makefile.MSVC comp=msvc asm=no libmp3lame-static.lib

            REM Install headers and library
            if not exist D:\a\_temp\msys64\usr\local\include\lame mkdir D:\a\_temp\msys64\usr\local\include\lame
            copy include\lame.h D:\a\_temp\msys64\usr\local\include\lame\
            if not exist D:\a\_temp\msys64\usr\local\lib mkdir D:\a\_temp\msys64\usr\local\lib

            REM Copy library with both naming conventions for maximum compatibility
            copy output\libmp3lame-static.lib D:\a\_temp\msys64\usr\local\lib\libmp3lame.lib
            copy output\libmp3lame-static.lib D:\a\_temp\msys64\usr\local\lib\mp3lame.lib
            copy output\libmp3lame-static.lib D:\a\_temp\msys64\usr\local\lib\lame.lib

            cd ..\..\..
            echo DEP_LAME=1>> %GITHUB_ENV%
          )

      - name: Build FFmpeg MSVC
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          CALL "${{steps.setup.outputs.installationPath}}\VC\Auxiliary\Build\vcvarsall.bat" ${{steps.setup.outputs.target}} ${{env.SDK_VER}}

          cd externals/ffmpeg-msvc

          REM Build FFmpeg with MSVC
          msys2 -c "export CUDA_PATH=\"$CUDA_PATH\"; export DEP_DAV1D=\"$DEP_DAV1D\"; export DEP_ZIMG=\"$DEP_ZIMG\"; export DEP_LAME=\"$DEP_LAME\"; ./build.sh ${{matrix.arch}}"

          cd ../..

      - name: Save FFmpeg MSVC cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          echo Saving FFmpeg MSVC cache to D:\ffmpeg-msvc-cache-${{ matrix.arch }}
          if exist "D:\a\_temp\msys64\usr\local" (
            xcopy /E /I /Y "D:\a\_temp\msys64\usr\local" "D:\ffmpeg-msvc-cache-${{ matrix.arch }}"
            echo Cache saved successfully
          ) else (
            echo Build output directory not found
            exit 1
          )

      - name: Install Node dependencies
        run: |
          npm install --ignore-scripts
          npm install -g prebuildify

      - name: Build Native Addon with MSVC
        shell: cmd
        run: |
          CALL "${{steps.setup.outputs.installationPath}}\VC\Auxiliary\Build\vcvarsall.bat" ${{steps.setup.outputs.target}} ${{env.SDK_VER}}

          REM Copy binding configuration
          copy binding-jellyfin.gyp binding.gyp

          REM Build with node-gyp using MSVC
          node-gyp configure --msvs_version=2022
          node-gyp build --release

          REM Create prebuilds directory
          mkdir prebuilds\win32-${{matrix.arch}}
          copy build\Release\node-av.node prebuilds\win32-${{matrix.arch}}\node-av.node

      - name: Run Tests
        shell: cmd
        run: |
          CALL "${{steps.setup.outputs.installationPath}}\VC\Auxiliary\Build\vcvarsall.bat" ${{steps.setup.outputs.target}} ${{env.SDK_VER}}
          npm run test:all

      - name: Upload Prebuild
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-windows-msvc-${{ matrix.arch }}
          path: prebuilds/

  build_linux:
    name: "Linux ${{ matrix.arch }}"
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            target: amd64
            runner: ubuntu-22.04
          - arch: arm64
            target: arm64
            runner: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - uses: actions/setup-node@v5
        with:
          node-version: "24"

      - name: Get Jellyfin FFmpeg commit hash
        id: ffmpeg-hash
        run: |
          if [ -n "${{ env.JELLYFIN_FFMPEG_HASH }}" ]; then
            echo "hash=${{ env.JELLYFIN_FFMPEG_HASH }}" >> $GITHUB_OUTPUT
          else
            echo "hash=$(git -C externals/jellyfin-ffmpeg rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Prepare directories
        run: |
          sudo mkdir -p /opt/ffbuild/prefix
          sudo chown -R $USER:$USER /opt/ffbuild
          sudo chmod -R 755 /opt/ffbuild

      - name: Restore FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-linux-${{ matrix.arch }}-${{ env.CACHE_VERSION_LINUX }}-${{ steps.ffmpeg-hash.outputs.hash }}
          restore-keys: |
            ffmpeg-linux-${{ matrix.arch }}-${{ env.CACHE_VERSION_LINUX }}-${{ steps.ffmpeg-hash.outputs.hash }}
            ffmpeg-linux-${{ matrix.arch }}-${{ env.CACHE_VERSION_LINUX }}-

      - name: Build FFmpeg
        id: build-ffmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          # Clear out /opt/ffbuild to avoid conflicts
          sudo rm -rf /opt/ffbuild
          sudo mkdir -p /opt/ffbuild/prefix
          sudo chown -R $USER:$USER /opt/ffbuild
          sudo chmod -R 755 /opt/ffbuild

          cd externals/jellyfin-ffmpeg/builder

          # Determine target
          if [ "${{ matrix.target }}" = "amd64" ]; then
            TARGET="linux64"
          else
            TARGET="linuxarm64"
          fi

          # Use our own Docker image
          IMAGE="ghcr.io/${{ github.repository }}/${TARGET}-gpl:latest"

          # Set GITHUB_REPOSITORY so build.sh uses our Docker images
          export GITHUB_REPOSITORY="${{ github.repository }}"

          # Try to pull our image from registry first
          if docker pull "${IMAGE}" 2>/dev/null; then
            echo "✓ Using our Docker image from registry: ${IMAGE}"
          else
            # If not available, build it locally using Jellyfin's makeimage.sh
            echo "Docker image not in registry, building locally..."
            ./makeimage.sh "${TARGET}" gpl
          fi

          # Run Jellyfin build script
          ./build.sh "${TARGET}" gpl

          # Now extract the prefix directory which contains all headers and static libraries
          if [ -d ffbuild/prefix ]; then
            sudo mkdir -p /opt/ffbuild/prefix
            sudo cp -r ffbuild/prefix/* /opt/ffbuild/prefix/
            
            # Also check if codec libraries are in /opt/ffbuild inside container
            # We might need to extract them from our Docker image
            CONTAINER_ID=$(docker create "ghcr.io/${{ github.repository }}/${TARGET}-gpl:latest")
            # Try to copy codec libraries if they exist
            docker cp "${CONTAINER_ID}:/opt/ffbuild/lib" /tmp/codec-libs 2>/dev/null && {
              sudo cp -n /tmp/codec-libs/*.a /opt/ffbuild/prefix/lib/ 2>/dev/null || true
              rm -rf /tmp/codec-libs
            }
            docker cp "${CONTAINER_ID}:/opt/ffbuild/include" /tmp/codec-includes 2>/dev/null && {
              sudo cp -rn /tmp/codec-includes/* /opt/ffbuild/prefix/include/ 2>/dev/null || true
              rm -rf /tmp/codec-includes
            }
            docker rm "${CONTAINER_ID}"
            
            # Clean up the preserved ffbuild directory now
            rm -rf ffbuild
            
            sudo chown -R $USER:$USER /opt/ffbuild
          else
            echo "Error: ffbuild/prefix not found!"
            exit 1
          fi

          cd ../..

      - name: Save FFmpeg cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true' && steps.build-ffmpeg.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-linux-${{ matrix.arch }}-${{ env.CACHE_VERSION_LINUX }}-${{ steps.ffmpeg-hash.outputs.hash }}

      - name: Upload FFmpeg cache as artifact
        if: env.UPLOAD_CACHES == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-cache-linux-${{ matrix.arch }}
          path: /opt/ffbuild/prefix
          retention-days: 7

      - name: Install Node dependencies
        run: |
          npm install --ignore-scripts
          npm install -g prebuildify

      - name: Build Native Addon
        run: |
          cp binding-jellyfin.gyp binding.gyp

          # Set up environment variables that node-gyp will use
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"

          export CC=clang-14
          export CXX=clang++-14
          export AR=llvm-ar-14
          export NM=llvm-nm-14
          export RANLIB=llvm-ranlib-14

          export LD=ld.lld-14
          # Use -Bsymbolic to bind symbols locally and avoid PIC issues
          # Use -z,notext to allow text relocations (needed for assembly code)
          export LDFLAGS="-fuse-ld=lld-14 -Wl,-z,notext -Wl,-Bsymbolic"
          BUILD_LDFLAGS="-L/opt/ffbuild/prefix/lib -fuse-ld=lld-14 -Wl,--allow-multiple-definition -Wl,-z,notext -Wl,-Bsymbolic"

          # Build N-API binary with proper include paths
          CFLAGS="-I/opt/ffbuild/prefix/include -fPIC" \
          CXXFLAGS="-I/opt/ffbuild/prefix/include -fPIC" \
          LDFLAGS="$BUILD_LDFLAGS" \
          prebuildify \
            --napi \
            --strip \
            --arch=${{ matrix.arch }} \
            --tag-libc

          # Rename the built file to node-av.node for consistency
          BUILT_FILE=$(find prebuilds -name "*.node" -type f | head -1)
          if [ -n "$BUILT_FILE" ]; then
            DIR=$(dirname "$BUILT_FILE")
            mv "$BUILT_FILE" "$DIR/node-av.node"
            echo "Renamed $(basename $BUILT_FILE) -> node-av.node"
            
            # Copy binary for tests
            mkdir -p binary
            cp "$DIR/node-av.node" binary/node-av.node
            echo "Copied binary for tests"
          else
            echo "Error: No .node file found in prebuilds directory"
            exit 1
          fi

      - name: Run Tests
        run: |
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          npm run test:all

      - name: Upload Prebuild
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-linux-${{ matrix.arch }}
          path: prebuilds/

  build_macos:
    name: "macOS ${{ matrix.arch }}"
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - uses: actions/setup-node@v5
        with:
          node-version: "24"

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Get Jellyfin FFmpeg commit hash
        id: ffmpeg-hash
        run: |
          if [ -n "${{ env.JELLYFIN_FFMPEG_HASH }}" ]; then
            echo "hash=${{ env.JELLYFIN_FFMPEG_HASH }}" >> $GITHUB_OUTPUT
          else
            echo "hash=$(git -C externals/jellyfin-ffmpeg rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Prepare directories
        run: |
          sudo mkdir -p /opt/ffbuild/prefix
          sudo chown -R $USER:staff /opt/ffbuild
          sudo chmod -R 755 /opt/ffbuild

      - name: Restore FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-macos-${{ matrix.arch }}-${{ env.CACHE_VERSION_MACOS }}-${{ steps.ffmpeg-hash.outputs.hash }}
          restore-keys: |
            ffmpeg-macos-${{ matrix.arch }}-${{ env.CACHE_VERSION_MACOS }}-${{ steps.ffmpeg-hash.outputs.hash }}
            ffmpeg-macos-${{ matrix.arch }}-${{ env.CACHE_VERSION_MACOS }}-

      - name: Build FFmpeg
        id: build-ffmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          # Clear out /opt/ffbuild to avoid conflicts
          sudo rm -rf /opt/ffbuild
          sudo mkdir -p /opt/ffbuild/prefix
          sudo chown -R $USER:staff /opt/ffbuild
          sudo chmod -R 755 /opt/ffbuild

          cd externals/jellyfin-ffmpeg/builder

          # Map our arch names to Jellyfin's
          ARCH_NAME="${{ matrix.arch }}"
          if [ "$ARCH_NAME" = "x64" ]; then
            ARCH_NAME="x86_64"
          fi

          # For x64 builds on ARM64 runner, we need to set up cross-compilation
          if [ "$ARCH_NAME" = "x86_64" ] && [ "$(uname -m)" = "arm64" ]; then
            echo "Setting up cross-compilation for x86_64 on ARM64 host"
            export CFLAGS="-arch x86_64"
            export CXXFLAGS="-arch x86_64"
            export LDFLAGS="-arch x86_64"
            export CMAKE_OSX_ARCHITECTURES="x86_64"
          fi

          # Run Jellyfin build script
          ./buildmac.sh $ARCH_NAME

          # The build script uses /ffbuild/prefix but we need /opt/ffbuild/prefix
          # Also need to run make install to get FFmpeg libraries
          cd ..
          make install DESTDIR="" prefix="/opt/ffbuild/prefix"

          # Fix permissions before caching
          sudo chown -R $USER:staff /opt/ffbuild

          cd ..

      - name: Save FFmpeg cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true' && steps.build-ffmpeg.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: /opt/ffbuild/prefix
          key: ffmpeg-macos-${{ matrix.arch }}-${{ env.CACHE_VERSION_MACOS }}-${{ steps.ffmpeg-hash.outputs.hash }}

      - name: Upload FFmpeg cache as artifact
        if: env.UPLOAD_CACHES == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-cache-macos-${{ matrix.arch }}
          path: /opt/ffbuild/prefix
          retention-days: 7

      - name: Install Node dependencies
        run: |
          npm install --ignore-scripts
          npm install -g prebuildify

      - name: Build Native Addon
        run: |
          cp binding-jellyfin.gyp binding.gyp

          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"

          # For x64 builds on ARM64 runner, set up cross-compilation
          if [ "${{ matrix.arch }}" = "x64" ] && [ "$(uname -m)" = "arm64" ]; then
            echo "Setting up Node.js cross-compilation for x86_64"
            export CFLAGS="-arch x86_64 -I/opt/ffbuild/prefix/include"
            export CXXFLAGS="-arch x86_64 -I/opt/ffbuild/prefix/include"
            export LDFLAGS="-arch x86_64 -L/opt/ffbuild/prefix/lib"
            export npm_config_arch=x64
            export npm_config_target_arch=x64
            export npm_config_disturl=https://nodejs.org/dist
            export npm_config_runtime=node
            export npm_config_build_from_source=true
          else
            export CFLAGS="-I/opt/ffbuild/prefix/include"
            export CXXFLAGS="-I/opt/ffbuild/prefix/include"
            export LDFLAGS="-L/opt/ffbuild/prefix/lib"
          fi

          # Build N-API binary
          prebuildify \
            --napi \
            --strip \
            --arch=${{ matrix.arch }}

          # Rename the built file to node-av.node for consistency
          BUILT_FILE=$(find prebuilds -name "*.node" -type f | head -1)
          if [ -n "$BUILT_FILE" ]; then
            DIR=$(dirname "$BUILT_FILE")
            mv "$BUILT_FILE" "$DIR/node-av.node"
            echo "Renamed $(basename $BUILT_FILE) -> node-av.node"
            
            # Copy binary for tests
            mkdir -p binary
            cp "$DIR/node-av.node" binary/node-av.node
            echo "Copied binary for tests"
          else
            echo "Error: No .node file found in prebuilds directory"
            exit 1
          fi

      - name: Run Tests
        # Only run tests when building for the native architecture
        if: matrix.arch == 'arm64' # macos-latest runs on ARM64
        run: |
          export PKG_CONFIG_PATH="/opt/ffbuild/prefix/lib/pkgconfig:${PKG_CONFIG_PATH}"
          npm run test:all

      - name: Skip Tests (Cross-compilation)
        if: matrix.arch == 'x64' # x64 is cross-compiled on ARM64 runners
        run: |
          echo "⚠️ Skipping tests for x64 build on ARM64 runner"
          echo "Cross-compiled binary (x64) cannot be tested on ARM64 host"

      - name: Upload Prebuild
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-macos-${{ matrix.arch }}
          path: prebuilds/
